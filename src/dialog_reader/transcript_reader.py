# -*- coding: utf-8 -*-
"""Ata Reader.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iJZ-ZiPGyFKHR7-T3twDiw7vdfYAQZZX
"""

!pip install -U -q PyDrive
import os
from google.colab import drive
drive.mount('/content/drive', force_remount=False)
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials
from pprint import pprint

# 1. Authenticate and create the PyDrive client.
auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)

# choose a local (colab) directory to store the data.
local_download_path = os.path.expanduser('~/data')
try:
  os.makedirs(local_download_path)
except: pass

import re
import pandas as pd

pd.set_option('display.max_rows', 500)
pd.set_option('display.max_columns', 500)
pd.set_option('display.width', 100)
pd.set_option('display.max_colwidth', None)

empty_space = re.compile('\s+')
session_start_end_time = re.compile("^Eram [0-9]{1,2} horas")
only_numbers = re.compile("^[0-9]*$")
dialog_line_start = re.compile("^[O|A] Sr")
starting_article = re.compile("^[O|A] ")
date_regex = re.compile("^[0-9]{1,2} DE .* DE [0-9]{4}")

class DialogLine:
  def __init__(line, transcript, date, position, person, party, text):
    line.transcript = transcript
    line.date = date
    line.position = position
    line.person = person
    line.party = party
    line.text = text
  def __str__(line):
    return "DialogLine:\n Transcript: %s\n Date: %s\n Position: %s\n Person: %s\n Party: %s\n Text: %s" % (line.transcript, line.date, line.position, line.person, line.party, line.text)
  def to_dict(line):
    return {
        'Transcript': line.transcript,
        'Date': line.date,
        'Position': line.position,
        'Person': line.person,
        'Party': line.party,
        'Text': line.text
    }

def get_person(line):
  split1 = starting_article.split(line.split(': —')[0])
  split2 = split1[1].split(' (')[0].split(' ')
  # print('PESSOA: ' + ' '.join(split2[1:]))
  return ' '.join(split2[1:])

def get_party(line):
  split1 = starting_article.split(line.split(': — ')[0])
  split2 = split1[1].split(' (')
  if len(split2) > 1:
    # print('PARTIDO: ' + split2[1].split(')')[0])
    return split2[1].split(')')[0]
  else: return ""

def get_text_start_line(line):
  return line.split(': —')[1].strip()

# Commented out IPython magic to ensure Python compatibility.
# %mkdir "/content/atas"
# %cd "/content/atas"

file_list = drive.ListFile({'q': "'1NvP85JrQWDWRnhCDgXnF3aEFk7cw10xq' in parents and trashed=false"}).GetList()

# for file1 in file_list:
# #   print('title: %s, id: %s' % (file1['title'], file1['id']))

# for i, ata in enumerate(sorted(file_list, key = lambda x: x['title']), start=1):
#     print('Downloading {} from GDrive (AI Democracy/Atas em .txt) ({}/{})'.format(ata['title'], i, len(file_list)))
#     ata.GetContentFile(ata['title'])
# print("done")

all_dialog_lines_list = []
for txt in file_list:
  try:
    transcript = txt['title'].split('.')[0]
    print(transcript)

    f = open('/content/drive/My Drive/AI Democracy /Transcripts/' + txt['title'], "r")

    transcript_lines = f.readlines()

    clean_lines = []
    start_end_index = []
    transcript_date = ""
    for line in transcript_lines:
      trimmed = line.strip()
      if date_regex.match(trimmed):
        transcript_date = trimmed
        continue
      if not empty_space.match(line) and not only_numbers.match(trimmed):
        clean_lines.append(trimmed)
        if session_start_end_time.match(trimmed):
          start_end_index.append(len(clean_lines)-1)

    start_plus1 = start_end_index[0] + 1
    this_transcript_dialog_lines = clean_lines[start_plus1:start_end_index[1]]
    this_transcript_dialog_lines[0] = "O Sr. Presidente: — " + this_transcript_dialog_lines[0]

    starting_lines_indexes = []
    for i, line in enumerate(this_transcript_dialog_lines):
      if ": —" in line and dialog_line_start.match(line):
        starting_lines_indexes.append(i)
    
    this_dialog_lines_list = []
    for i, starting_line_index in enumerate(starting_lines_indexes):
      start_line = this_transcript_dialog_lines[starting_line_index]
      next_start_index = starting_lines_indexes[(i + 1) % len(starting_lines_indexes)]
      text_lines = " ".join(this_transcript_dialog_lines[starting_line_index+1:]) if next_start_index == 0 else " ".join(this_transcript_dialog_lines[starting_line_index+1:next_start_index])
      start_text = get_text_start_line(start_line)
      this_dialog_lines_list.append(DialogLine(transcript, transcript_date, i, get_person(start_line),get_party(start_line), start_text + " " + text_lines))

    print(len(this_dialog_lines_list))
    all_dialog_lines_list = all_dialog_lines_list + this_dialog_lines_list
  except:
    print(f"Não gerada: {transcript}")

print(len(all_dialog_lines_list))
print(all_dialog_lines_list[0])
print(all_dialog_lines_list[-1])

df = pd.DataFrame.from_records([line.to_dict() for line in all_dialog_lines_list])

from IPython.display import display
# df.to_csv('dialog_lines_database_29_04_21.csv', index=False)
# display(df[1400:1700])

df.head(50)
# df.head(100)