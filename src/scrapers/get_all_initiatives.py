# -*- coding: utf-8 -*-
"""Get All Initiatives.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BBf7E07K9nKqVib1a_JVx77raZRo7lRU
"""

from google.colab import drive
drive.mount('/content/drive')
!pip install selenium

###This cell sets required configuration for Selenium WebDriver.
###It must be run once.
!apt-get update # to update ubuntu to correctly run apt install
!apt install chromium-chromedriver
!cp /usr/lib/chromium-browser/chromedriver /usr/bin
import sys
sys.path.insert(0,'/usr/lib/chromium-browser/chromedriver')
from selenium import webdriver
chrome_options = webdriver.ChromeOptions()
chrome_options.add_argument('--headless')
chrome_options.add_argument('--no-sandbox')
chrome_options.add_argument('--disable-dev-shm-usage')

# Commented out IPython magic to ensure Python compatibility.
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.by import By
from selenium.common.exceptions import NoSuchElementException
from bs4 import BeautifulSoup
import pandas as pd
import requests as re
import time
from datetime import datetime
# %cd "/content/drive/My Drive/AI Democracy /Scripts/Get All Initiatives"
# import read_page,go_to_page
execfile('read_page.py')
execfile('go_to_page.py')

###This cell initializes functions and required configuration for Selenium WebDriver.
###It must be run once.
wd = webdriver.Chrome('chromedriver',options=chrome_options)
wd.get("https://www.parlamento.pt/ActividadeParlamentar/Paginas/IniciativasLegislativas.aspx")
# wd.save_screenshot('initial_state.png')

js_set_session_1 = "var sel = document.getElementById('ctl00_ctl52_g_a8f3fd9b_803d_47ef_8eab_9264b9b66cd7_ctl00_ddlSL');sel.selectedIndex = 1;"
js_set_initiative_law = "var sel = document.getElementById('ctl00_ctl52_g_a8f3fd9b_803d_47ef_8eab_9264b9b66cd7_ctl00_ddlTipoIniciativa');sel.selectedIndex = 5;"
js_set_initiative_resolution = "var sel = document.getElementById('ctl00_ctl52_g_a8f3fd9b_803d_47ef_8eab_9264b9b66cd7_ctl00_ddlTipoIniciativa');sel.selectedIndex = 7;"
js_set_initiative_petition = "var sel = document.getElementById('ctl00_ctl52_g_a8f3fd9b_803d_47ef_8eab_9264b9b66cd7_ctl00_ddlTipoIniciativa');sel.selectedIndex = 2;"
js_search_button = "var elem = document.getElementById('ctl00_ctl52_g_a8f3fd9b_803d_47ef_8eab_9264b9b66cd7_ctl00_btnPesquisar');return elem;"
js_page_buttons = "var elem = document.getElementById('ctl00_ctl52_g_a8f3fd9b_803d_47ef_8eab_9264b9b66cd7_ctl00_dpgResults');return elem.children;"
js_get_results_div = "var elem = document.getElementById('ctl00_ctl52_g_a8f3fd9b_803d_47ef_8eab_9264b9b66cd7_ctl00_pnlResults'); return elem;"
js_close_cookie_msg = "var elem = document.getElementById('cookieClose');return elem;"

closeCookie = wd.execute_script(js_close_cookie_msg)
closeCookie.click()

# wd.save_screenshot("final_state.png")

# Commented out IPython magic to ensure Python compatibility.
###This cell has the script for looping through 

###The next 3 lines read the first page and store into final_df.
page_soup : BeautifulSoup = BeautifulSoup(wd.page_source,"html.parser")
final_df = read_page(page_soup)
go_to_page(1)

###The loops below will go through all pages containing Lesiglative Initiatives
###and get its information. For each page read, a number will be printed indicating
###how long (in seconds) the script took for reading that page.

###This loop will get the first ten (except the first) pages and store into final_df.
i = 1
while(i<10):
  start = time.time()
  this_soup : BeautifulSoup = BeautifulSoup(wd.page_source,"html.parser")
  final_df = pd.concat([final_df,read_page(this_soup)])
  
  go_to_page(i+1)
  
  end = time.time()
  print(i, end - start)
  i += 1
  
###This loop will get all other pages and store into final_df.
i = 1
while(i<=10):
  start = time.time()
  this_soup : BeautifulSoup = BeautifulSoup(wd.page_source,"html.parser")
  try:
    final_df = pd.concat([final_df,read_page(this_soup)])
    go_to_page(i+1)
  except:
    print("The script has ended reading the Initiatives.")
    break

  end = time.time()
  print(i, end - start)
  if (i == 10):
    i = 1
  else:
    i += 1
  
###Prints number of rows and columns of the DataFrame.
print("(Rows, Columns) = ",final_df.shape)
###Prints the last 15 rows of the DataFrame.
# final_df.tail(15)
# datetime object containing current date and time
now = datetime.now()
# dd/mm/YY H:M:S
now_string = now.strftime("%d%m%Y %H:%M:%S")
# today_string = now.strftime("%d/%m/%Y")
# %cd "/content/drive/My Drive/AI Democracy /Scripts/Get All Initiatives"

output_folder = ("/content/drive/My Drive/AI Democracy /Scripts/Get All Initiatives/"+now_string)
!mkdir -p "{output_folder}"
# %cd "{output_folder}"

###Saves the DataFrame both as a csv and a xlsx file into output directory.
initiatives_database_name = 'initiatives'+now_string
final_df.to_csv(initiatives_database_name+'.csv')
final_df.to_excel(initiatives_database_name+'.xlsx')
wd.close()

"""# New Section"""